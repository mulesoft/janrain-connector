/**
 * (c) 2003-2012 MuleSoft, Inc. This software is protected under international
 * copyright law. All use of this software is subject to MuleSoft's Master
 * Subscription Agreement (or other Terms of Service) separately entered
 * into between you and MuleSoft. If such an agreement is not in
 * place, you may not use the software.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */

package org.mule.modules.janrain;

import java.util.Map;

import javax.ws.rs.core.MediaType;

import org.mule.api.annotations.param.Optional;
import org.mule.modules.janrain.exception.JanrainException;
import org.mule.modules.janrain.responses.Backplane;
import org.mule.modules.janrain.responses.Broadcast;
import org.mule.modules.janrain.responses.Direct;
import org.mule.modules.janrain.responses.Identifiers;
import org.mule.modules.janrain.responses.Plugin;
import org.mule.modules.janrain.responses.ShareProviders;
import org.mule.modules.janrain.responses.UserInfo;
import org.mule.modules.janrain.responses.Contacts;
import org.mule.modules.janrain.responses.AvailableProviders;
import org.mule.modules.janrain.responses.WidgetProviders;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.ClientResponse.Status;

@SuppressWarnings("unused")
public class JanrainClientImpl implements JanrainClient {

    private String appName;
    private String appId;
    private String apiKey;
    private WebResource apiResource;
    private Gson gson;
    
    public JanrainClientImpl(String appName, String appId, String apiKey, WebResource apiResource, Gson gson) {
        this.appName = appName;
        this.appId = appId;
        this.apiKey = apiKey;
        this.apiResource = apiResource;
        this.gson = gson;
    }
    
    public UserInfo authInfo(String token, Boolean extended, String tokenURL) {
        WebResource request = apiResource.path("auth_info").queryParam("apiKey", apiKey).queryParam("token", token);
        
        if (extended != null) request = request.queryParam("extended", extended.toString());
        if (tokenURL != null) request = request.queryParam("tokenURL", tokenURL);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
        
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
        
        return gson.fromJson(response.getEntity(String.class), UserInfo.class);
    }
    
    public boolean addOrUpdateAccessToken(String token, String identifier) {
        WebResource request = apiResource.path("add_or_update_access_token").queryParam("apiKey", apiKey).queryParam("token", token).queryParam("identifier", identifier);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
        
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
        
        return true;
    }
    
    public Map<String, String> analyticsAccess(String start, String end) {
        WebResource request = apiResource.path("analytics_access").queryParam("apiKey", apiKey).queryParam("start", start).queryParam("end", end);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), new TypeToken<Map<String, String>>(){}.getType());
    }
    
    public Map<String, String> getAppSettings() {
        WebResource request = apiResource.path("get_app_settings").queryParam("apiKey", apiKey);

        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), new TypeToken<Map<String, String>>(){}.getType());
    }
    
    public AvailableProviders getAvailableProviders() {
        WebResource request = apiResource.path("get_available_providers");

        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), AvailableProviders.class);
    }
    
    public Contacts getContacts(String identifier, String contactType, Boolean existingUser) {
        WebResource request = apiResource.path("get_contacts").queryParam("apiKey", apiKey).queryParam("identifier", identifier).queryParam("contactType", contactType);

        if (existingUser != null) request = request.queryParam("existingUser", existingUser.toString());
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), Contacts.class);
    }
    
    public UserInfo getUserData(String identifier, Boolean extended) {
        WebResource request = apiResource.path("get_user_data").queryParam("apiKey", apiKey).queryParam("identifier", identifier);

        if (extended != null) request = request.queryParam("existingUser", extended.toString());
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), UserInfo.class);
    }
    
    public WidgetProviders providers() {
        WebResource request = apiResource.path("providers");
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), WidgetProviders.class);
    }
    
    public boolean setAppSettings(String privacyPolicy, String favicon, String domainRedirect, Boolean postToTokenUrl, Boolean oneTimeUseTokens, Boolean googleProfileUrl) {
        WebResource request = apiResource.path("set_app_settings").queryParam("apiKey", apiKey);
        
        if (privacyPolicy != null) request = request.queryParam("privacyPolicy", privacyPolicy);
        if (favicon != null) request = request.queryParam("favicon", favicon);
        if (domainRedirect != null) request = request.queryParam("domainRedirect", domainRedirect);
        if (postToTokenUrl != null) request = request.queryParam("postToTokenUrl", postToTokenUrl.toString());
        if (oneTimeUseTokens != null) request = request.queryParam("oneTimeUseTokens", oneTimeUseTokens.toString());
        if (googleProfileUrl != null) request = request.queryParam("googleProfileUrl", googleProfileUrl.toString());
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
        
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
        
        return true;
    }
    
    public boolean setAuthProviders(String providers, String deviceType) {
        WebResource request = apiResource.path("set_auth_providers").queryParam("apiKey", apiKey).queryParam("providers", providers);
        
        if (deviceType != null) request = request.queryParam("device_type", deviceType);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
        
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
        
        return true;
    }
    
    public String allMappings() {
        WebResource request = apiResource.path("all_mappings").queryParam("apiKey", apiKey);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
        
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
        
        return response.getEntity(String.class);
    }
    
    public boolean map(String identifier, String primaryKey, Boolean overwrite) {
        WebResource request = apiResource.path("map").queryParam("apiKey", apiKey).queryParam("identifier", identifier).queryParam("primaryKey", primaryKey);
        
        if (overwrite != null) request = request.queryParam("overwrite", overwrite.toString());
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
        
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
        
        return true;
    }
    
    public Identifiers mappings(String primaryKey) {
        WebResource request = apiResource.path("mappings").queryParam("apiKey", apiKey).queryParam("primaryKey", primaryKey);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), Identifiers.class);
    }
    
    public boolean unmap(String identifier, Boolean allIdentifiers, String primaryKey, Boolean unlink) {
        WebResource request = apiResource.path("unmap").queryParam("apiKey", apiKey).queryParam("identifier", identifier).queryParam("all_identifiers", allIdentifiers.toString()).queryParam("primaryKey", primaryKey).queryParam("unlink", unlink.toString());
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
        
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
        
        return true;   
    }
    
    public Broadcast broadcast(String identifier, String deviceToken, String title, String url, String source, String message, String description, String image, String media, String actionLink, String objectId) {
        WebResource request = apiResource.path("sharing/broadcast").queryParam("apiKey", apiKey);
        
        if ((identifier == null && deviceToken == null) || (identifier != null && deviceToken != null)) 
            throw new JanrainException("Broadcast requires either the identifier parameter or the deviceToken parameter.");
        
        if (identifier != null) request = request.queryParam("identifier", identifier);
        if (deviceToken != null) request = request.queryParam("device_token", deviceToken);
        if (title != null) request = request.queryParam("title", title);
        if (url != null) request = request.queryParam("url", url);
        if (source != null) request = request.queryParam("source", source);
        if (message != null) request = request.queryParam("message", message);
        if (description != null) request = request.queryParam("description", description);
        if (image != null) request = request.queryParam("image", image);
        if (media != null) request = request.queryParam("media", media);
        if (actionLink != null) request = request.queryParam("actionLink", actionLink);
        if (objectId != null) request = request.queryParam("objectId", objectId);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), Broadcast.class);
    }
    
    public Direct direct(String identifier, String deviceToken, String title, String url, String recipients, String source, String message, String description, String image, String media, String actionLink, String recipientUrls) {
        WebResource request = apiResource.path("sharing/direct").queryParam("apiKey", apiKey).queryParam("recipients", recipients);
        
        if ((identifier == null && deviceToken == null) || (identifier != null && deviceToken != null)) 
            throw new JanrainException("Broadcast requires either the identifier parameter or the deviceToken parameter.");
        
        if (identifier != null) request = request.queryParam("identifier", identifier);
        if (deviceToken != null) request = request.queryParam("device_token", deviceToken);
        if (title != null) request = request.queryParam("title", title);
        if (url != null) request = request.queryParam("url", url);
        if (source != null) request = request.queryParam("source", source);
        if (message != null) request = request.queryParam("message", message);
        if (description != null) request = request.queryParam("description", description);
        if (image != null) request = request.queryParam("image", image);
        if (media != null) request = request.queryParam("media", media);
        if (actionLink != null) request = request.queryParam("actionLink", actionLink);
        if (recipientUrls != null) request = request.queryParam("recipientUrls", recipientUrls);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), Direct.class);
    }
    
    public String getShareCount(String url, String callback) {
        WebResource request = apiResource.path("get_share_count").queryParam("apiKey", apiKey).queryParam("url", url);

        if (callback != null) request = request.queryParam("callback", callback);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return response.getEntity(String.class);
    }
    
    public ShareProviders getShareProviders() {
        WebResource request = apiResource.path("get_share_providers");
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), ShareProviders.class);
    }
    
    public boolean setShareProviders(String share, String email) {
        WebResource request = apiResource.path("set_share_providers").queryParam("apiKey", apiKey).queryParam("share", share);
        
        if (email != null) request = request.queryParam("email", email);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
        
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
        
        return true;
    }
    
    public boolean addDomainPatterns(String domains) {
        WebResource request = apiResource.path("add_domain_patterns").queryParam("apiKey", apiKey).queryParam("domains", domains);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
        
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
        
        return true;
    }
    
    public Backplane getBackplaneProperties() {
        WebResource request = apiResource.path("get_backplane_properties").queryParam("apiKey", apiKey);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), Backplane.class);
    }
    
    public String getDomainPatterns() {
        WebResource request = apiResource.path("get_domain_patterns").queryParam("apiKey", apiKey);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return response.getEntity(String.class);
    }
    
    public Plugin lookupRp(String pluginName, String pluginVersion) {
        WebResource request = apiResource.path("lookup_rp").queryParam("apiKey", apiKey);

        if (pluginName != null) request = request.queryParam("pluginName", pluginName);
        if (pluginVersion != null) request = request.queryParam("pluginVersion", pluginVersion);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
    
        return gson.fromJson(response.getEntity(String.class), Plugin.class);
    }
    
    public boolean setBackplaneProperties(String server, String bus, String version, Boolean remove, String username, String password) {
        WebResource request = apiResource.path("set_backplane_properties").queryParam("apiKey", apiKey).queryParam("server", server).queryParam("bus", bus).queryParam("username", username).queryParam("password", password);
        
        if (version != null) request = request.queryParam("version", version);
        if (remove != null) request = request.queryParam("remove", remove.toString());
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
        
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
        
        return true;
    }
    
    public boolean setDomainPatterns(String domains) {
        WebResource request = apiResource.path("set_domain_patterns").queryParam("apiKey", apiKey).queryParam("domains", domains);
        
        ClientResponse response = request.accept(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
        
        if (response.getClientResponseStatus() != Status.OK) throw new JanrainException(response.getEntity(String.class));
        
        return true;
    }

}