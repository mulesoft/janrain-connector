/**
 * (c) 2003-2012 MuleSoft, Inc. This software is protected under international
 * copyright law. All use of this software is subject to MuleSoft's Master
 * Subscription Agreement (or other Terms of Service) separately entered
 * into between you and MuleSoft. If such an agreement is not in
 * place, you may not use the software.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */

package org.mule.modules.janrain.client;

import java.util.Map;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;

import org.mule.modules.janrain.engage.AuthInfos;
import org.mule.modules.janrain.engage.AvailableProviders;
import org.mule.modules.janrain.engage.Backplane;
import org.mule.modules.janrain.engage.Broadcast;
import org.mule.modules.janrain.engage.Contacts;
import org.mule.modules.janrain.engage.Direct;
import org.mule.modules.janrain.engage.DomainPatterns;
import org.mule.modules.janrain.engage.Identifiers;
import org.mule.modules.janrain.engage.Plugin;
import org.mule.modules.janrain.engage.ShareProviders;
import org.mule.modules.janrain.engage.UserInfo;
import org.mule.modules.janrain.engage.WidgetProviders;
import org.mule.modules.janrain.exception.JanrainException;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.core.util.MultivaluedMapImpl;

public class JanrainEngageClientImpl extends JanrainClientImpl implements JanrainEngageClient {

    private final static String API_ENGAGE_URL =  ".rpxnow.com/api/v2/";
    
    public JanrainEngageClientImpl(String appName, String appId, String apiKey, Client jerseyClient, Gson gson) {
        super(appName, appId, apiKey, gson);
        setApiResource(jerseyClient.resource("https://" + appName + API_ENGAGE_URL));
    }
    
    public UserInfo authInfo(String token, Boolean extended, String tokenURL) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("token", token);
        if (extended != null) params.add("extended", extended.toString());
        if (tokenURL != null) params.add("tokenURL", tokenURL);
                
        return getGson().fromJson(execute("auth_info", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), UserInfo.class);
    }
    
    public boolean addOrUpdateAccessToken(String token, String identifier) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("token", token);
        params.add("identifier", identifier);
        
        execute("add_or_update_access_token", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public Map<String, String> analyticsAccess(String start, String end) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("start", start);
        params.add("end", end);
        
        return getGson().fromJson(execute("analytics_access", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), new TypeToken<Map<String, String>>(){}.getType());
    }
    
    public Map<String, String> getAppSettings() {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());

        return getGson().fromJson(execute("get_app_settings", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), new TypeToken<Map<String, String>>(){}.getType());
    }
    
    public AvailableProviders getAvailableProviders() {    
        return getGson().fromJson(execute("get_available_providers", null, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), AvailableProviders.class);
    }
    
    public Contacts getContacts(String identifier, String contactType, Boolean existingUser) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("identifier", identifier);
        params.add("contactType", contactType);
        if (existingUser != null) params.add("existingUser", existingUser.toString());
            
        return getGson().fromJson(execute("get_contacts", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), Contacts.class);
    }
    
    public UserInfo getUserData(String identifier, Boolean extended) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("identifier", identifier);
        if (extended != null) params.add("existingUser", extended.toString());
    
        return getGson().fromJson(execute("get_user_data", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), UserInfo.class);
    }
    
    public WidgetProviders providers() {    
        return getGson().fromJson(execute("providers", null, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), WidgetProviders.class);
    }
    
    public boolean setAppSettings(String privacyPolicy, String favicon, String domainRedirect, Boolean postToTokenUrl, Boolean oneTimeUseTokens, Boolean googleProfileUrl) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        if (privacyPolicy != null) params.add("privacyPolicy", privacyPolicy);
        if (favicon != null) params.add("favicon", favicon);
        if (domainRedirect != null) params.add("domainRedirect", domainRedirect);
        if (postToTokenUrl != null) params.add("postToTokenUrl", postToTokenUrl.toString());
        if (oneTimeUseTokens != null) params.add("oneTimeUseTokens", oneTimeUseTokens.toString());
        if (googleProfileUrl != null) params.add("googleProfileUrl", googleProfileUrl.toString());
        
        execute("set_app_settings", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public boolean setAuthProviders(String providers, String deviceType) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("providers", providers);
        if (deviceType != null) params.add("device_type", deviceType);
        
        execute("set_auth_providers", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public String allMappings() {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        
        return execute("all_mappings", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class);
    }
    
    public boolean map(String identifier, String primaryKey, Boolean overwrite) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("identifier", identifier);
        params.add("primaryKey", primaryKey);
        if (overwrite != null) params.add("overwrite", overwrite.toString());
        
        execute("map", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public Identifiers mappings(String primaryKey) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("primaryKey", primaryKey);
            
        return getGson().fromJson(execute("mappings", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), Identifiers.class);
    }
    
    public boolean unmap(String identifier, Boolean allIdentifiers, String primaryKey, Boolean unlink) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("identifier", identifier);
        params.add("all_identifiers", allIdentifiers.toString());
        params.add("primaryKey", primaryKey);
        params.add("unlink", unlink.toString());
        
        execute("unmap", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;   
    }
    
    public Broadcast broadcast(String identifier, String deviceToken, String title, String url, String source, String message, String description, String image, String media, String actionLink, String objectId) {
        if ((identifier == null && deviceToken == null) || (identifier != null && deviceToken != null)) 
            throw new JanrainException("Broadcast requires either the identifier parameter or the deviceToken parameter.");
        
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        if (identifier != null) params.add("identifier", identifier);
        if (deviceToken != null) params.add("device_token", deviceToken);
        if (title != null) params.add("title", title);
        if (url != null) params.add("url", url);
        if (source != null) params.add("source", source);
        if (message != null) params.add("message", message);
        if (description != null) params.add("description", description);
        if (image != null) params.add("image", image);
        if (media != null) params.add("media", media);
        if (actionLink != null) params.add("actionLink", actionLink);
        if (objectId != null) params.add("objectId", objectId);
        
        return getGson().fromJson(execute("sharing/broadcast", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), Broadcast.class);
    }
    
    public Direct direct(String identifier, String deviceToken, String title, String url, String recipients, String source, String message, String description, String image, String media, String actionLink, String recipientUrls) {
        if ((identifier == null && deviceToken == null) || (identifier != null && deviceToken != null)) 
            throw new JanrainException("Broadcast requires either the identifier parameter or the deviceToken parameter.");
        
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("recipients", recipients);
        if (identifier != null) params.add("identifier", identifier);
        if (deviceToken != null) params.add("device_token", deviceToken);
        if (title != null) params.add("title", title);
        if (url != null) params.add("url", url);
        if (source != null) params.add("source", source);
        if (message != null) params.add("message", message);
        if (description != null) params.add("description", description);
        if (image != null) params.add("image", image);
        if (media != null) params.add("media", media);
        if (actionLink != null) params.add("actionLink", actionLink);
        if (recipientUrls != null) params.add("recipientUrls", recipientUrls);
    
        return getGson().fromJson(execute("sharing/direct", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), Direct.class);
    }
    
    public String getShareCount(String url, String callback) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("url", url);
        if (callback != null) params.add("callback", callback);
    
        return execute("get_share_count", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class);
    }
    
    public ShareProviders getShareProviders() {
        return getGson().fromJson(execute("get_share_providers", null, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), ShareProviders.class);
    }
    
    public boolean setShareProviders(String share, String email) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("share", share);
        if (email != null) params.add("email", email);
        
        execute("set_share_providers", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public boolean addDomainPatterns(String domains) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("domains", domains);
        
        execute("add_domain_patterns", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public Backplane getBackplaneProperties() {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
    
        return getGson().fromJson(execute("get_backplane_properties", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), Backplane.class);
    }
    
    public DomainPatterns getDomainPatterns() {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        
        return getGson().fromJson(execute("get_domain_patterns", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), DomainPatterns.class);
    }
    
    public Plugin lookupRp(String pluginName, String pluginVersion) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        if (pluginName != null) params.add("pluginName", pluginName);
        if (pluginVersion != null) params.add("pluginVersion", pluginVersion);

        return getGson().fromJson(execute("lookup_rp", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), Plugin.class);
    }
    
    public boolean setBackplaneProperties(String server, String bus, String version, Boolean remove, String username, String password) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("server", server);
        params.add("bus", bus);
        params.add("username", username);
        params.add("password", password);
        if (version != null) params.add("version", version);
        if (remove != null) params.add("remove", remove.toString());
        
        execute("set_backplane_properties", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public boolean setDomainPatterns(String domains) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("domains", domains);
        
        execute("set_domain_patterns", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public boolean activity(String activity, String identifier, String deviceToken, Boolean truncate, Boolean prependName, String urlShortening, String source) {
        if ((identifier == null && deviceToken == null) || (identifier != null && deviceToken != null)) 
            throw new JanrainException("Activity requires either the identifier parameter or the deviceToken parameter.");
        
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("activity", activity);
        if (identifier != null) params.add("identifier", identifier);
        if (deviceToken != null) params.add("device_token", deviceToken);
        if (truncate != null) params.add("truncate", truncate.toString());
        if (prependName != null) params.add("prepend_name", prependName.toString());
        if (urlShortening != null) params.add("url_shortening", urlShortening);
        if (source != null) params.add("source", source);
        
        execute("activity", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public AuthInfos authInfos(String tokens, Boolean extended) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("tokens", tokens);
        if (extended != null) params.add("extended", extended.toString());
        
        return getGson().fromJson(execute("auth_infos", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), AuthInfos.class);
    }
        
    public boolean setStatus(String identifier, String status, String location, Boolean truncate, String source) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", getApiKey());
        params.add("identifier", identifier);
        params.add("status", status);
        if (location != null) params.add("location", location);
        if (truncate != null) params.add("truncate", truncate.toString());
        if (source != null) params.add("source", source);
        
        execute("set_status", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
}