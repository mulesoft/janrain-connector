/**
 * (c) 2003-2012 MuleSoft, Inc. This software is protected under international
 * copyright law. All use of this software is subject to MuleSoft's Master
 * Subscription Agreement (or other Terms of Service) separately entered
 * into between you and MuleSoft. If such an agreement is not in
 * place, you may not use the software.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */

package org.mule.modules.janrain.client;

import java.util.Map;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;

import org.mule.modules.janrain.partner.Admins;
import org.mule.modules.janrain.partner.AppInfo;
import org.mule.modules.janrain.partner.Apps;
import org.mule.modules.janrain.partner.Invites;
import org.mule.modules.janrain.partner.Permissions;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.core.util.MultivaluedMapImpl;

public class JanrainPartnerClientImpl extends JanrainClientImpl implements JanrainPartnerClient {
    
    private final static String API_PARTNER_URL =  "https://rpxnow.com/partner/v2/";
    
    public JanrainPartnerClientImpl(String appName, String appId, String apiKey, Client jerseyClient, Gson gson) {
        super(appName, appId, apiKey, gson);
        setApiResource(jerseyClient.resource(API_PARTNER_URL));
    }
    
    public Map<String, String> addBpBus(String partnerKey) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("partnerKey", partnerKey);
        params.add("apiKey", getApiKey());
        
        return getGson().fromJson(execute("app/add_bp_bus", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), new TypeToken<Map<String, String>>(){}.getType());
    }
    
    public Apps apps(String partnerKey) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("partnerKey", partnerKey);
        
        return getGson().fromJson(execute("apps", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), Apps.class);
    }
    
    public boolean addAdmin(String partnerKey, String email, Boolean verify) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("partnerKey", partnerKey);
        params.add("apiKey", getApiKey());
        params.add("email", email);
        if (verify != null) params.add("verify", verify.toString());
            
        execute("admin/add", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public boolean deleteAdmin(String partnerKey, String email) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("partnerKey", partnerKey);
        params.add("apiKey", getApiKey());
        params.add("email", email);
            
        execute("admin/delete", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public Admins getAdmins(String partnerKey) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("partnerKey", partnerKey);
        params.add("apiKey", getApiKey());
            
        return getGson().fromJson(execute("admin/get", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), Admins.class);
    }
    
    public boolean addDomain(String partnerKey, String apiKey, String domain) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("partnerKey", partnerKey);
        params.add("apiKey", apiKey);
        params.add("domain", domain);
            
        execute("app/add_domain", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public AppInfo createApp(String partnerKey, String email, String displayName, String domain) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("partnerKey", partnerKey);
        params.add("email", email);
        params.add("name", displayName);
        params.add("domain", domain);
            
        return getGson().fromJson(execute("app/create", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), AppInfo.class);
    }
    
    public String createInvite(String apiKey, String partnerKey, String email) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", apiKey);
        params.add("partnerKey", partnerKey);
        params.add("email", email);
            
        return execute("app/create_invite", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class);
    }
    
    public boolean deleteApp(String apiKey, String partnerKey) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("partnerKey", partnerKey);
        params.add("apiKey", apiKey);
            
        execute("app/delete", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public Invites getPendingInvites(String apiKey, String partnerKey) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", apiKey);
        params.add("partnerKey", partnerKey);
            
        return getGson().fromJson(execute("app/get_pending_invites", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), Invites.class);
    }
    
    public Map<String, String> getProperties(String partnerKey, String engageApiKey, String provider) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("partnerKey", partnerKey);
        params.add("engageApiKey", engageApiKey);
        params.add("provider", provider);
        
        return getGson().fromJson(execute("app/get_properties", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), new TypeToken<Map<String, String>>(){}.getType()); 
    }
    
    public Permissions getProviderPermissions(String partnerKey, String engageApiKey, String provider) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("partnerKey", partnerKey);
        params.add("engageApiKey", engageApiKey);
        params.add("provider", provider);
            
        return getGson().fromJson(execute("app/get_provider_permissions", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class), Permissions.class);
    }
    
    public String resetApiKey(String rpAppId, String partnerKey) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("appId", rpAppId);
        params.add("partnerKey", partnerKey);
            
        return execute("app/reset_api_key", params, MediaType.APPLICATION_JSON_TYPE, "POST").getEntity(String.class);
    }
    
    public boolean setProperties(String engageApiKey, String partnerKey, String provider, String fbAppID, String fbSecret,
            Boolean emailPerm, String uninstallURL, String consumerKey, String secret, String paypalDisplayName,
            String email, String liveidAppID, String liveidSecret, String liveidPrivacyPolicyUrl, String yahooAppID, 
            Boolean activityScopesSet, Boolean contactsScopeSet) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", engageApiKey);
        params.add("partnerKey", partnerKey);
        params.add("provider", provider);
        params.add("consumerKey", consumerKey);
        params.add("secret", secret);
        if (fbAppID != null) params.add("fbAppID", fbAppID);
        if (fbSecret != null) params.add("fbSecret", fbSecret);
        if (emailPerm != null) params.add("emailPerm", emailPerm.toString());
        if (uninstallURL != null) params.add("uninstallURL", uninstallURL);
        if (paypalDisplayName != null) params.add("paypalDisplayName", paypalDisplayName);
        if (email != null) params.add("email", email);
        if (liveidAppID != null) params.add("liveidAppID", liveidAppID);
        if (liveidSecret != null) params.add("liveidSecret", liveidSecret);
        if (liveidPrivacyPolicyUrl != null) params.add("liveidPrivacyPolicyUrl", liveidPrivacyPolicyUrl);
        if (yahooAppID != null) params.add("yahooAppID", yahooAppID);
        if (activityScopesSet != null) params.add("activityScopesSet", activityScopesSet.toString());
        if (contactsScopeSet != null) params.add("contactsScopeSet", contactsScopeSet.toString());
        
        execute("app/set_properties", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public boolean setProviderPermissions(String engageApiKey, String partnerKey, String provider, String permissions) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", engageApiKey);
        params.add("partnerKey", partnerKey);
        params.add("provider", provider);
        params.add("permissions", permissions);
        
        execute("app/set_provider_permissions", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
    public boolean verifyDomain(String engageApiKey, String partnerKey, String provider, String code, String filename) {
        MultivaluedMap<String, String> params = new MultivaluedMapImpl();
        params.add("apiKey", engageApiKey);
        params.add("partnerKey", partnerKey);
        params.add("provider", provider);
        if (code != null) params.add("code", code);
        if (filename != null) params.add("filename", filename);
        
        execute("app/verify_domain", params, MediaType.APPLICATION_JSON_TYPE, "POST");
        
        return true;
    }
    
}