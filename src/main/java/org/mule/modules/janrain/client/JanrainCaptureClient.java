/**
 * (c) 2003-2015 MuleSoft, Inc. The software in this package is published under
 * the terms of the CPAL v1.0 license, a copy of which has been included with this
 * distribution in the LICENSE.md file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */

package org.mule.modules.janrain.client;

import java.util.Map;

import org.mule.modules.janrain.capture.BulkResponse;
import org.mule.modules.janrain.capture.ClientInfo;
import org.mule.modules.janrain.capture.ClientListInfo;

public interface JanrainCaptureClient {
    
    public ClientInfo addClient(String client_id, String client_secret, String description, String features);
    
    public boolean clearWhitelist(String client_id, String client_secret, String for_client_id);
    
    public boolean deleteClient(String client_id, String client_secret, String client_id_for_deletion);
    
    public ClientListInfo listClients(String client_id, String client_secret, String has_features);
    
    public boolean setDescription(String client_id, String client_secret, String for_client_id, String description);
    
    public boolean setFeatures(String client_id, String client_secret, String for_client_id, String features);
    
    public boolean setWhitelist(String client_id, String client_secret, String for_client_id, String whitelist);
    
    public String retrieveEntity(String client_secret, String client_id, String access_token, String uuid, String id, String key_attribute, String key_value, String password_attribute, String password_value, String type_name, String attribute_name, String attributes, String created, String last_updated);
    
    public boolean entityAdopt(String client_secret, String client_id, String type_name, String id, String access_token, String attribute_name, String child_id);
    
    public BulkResponse entityBulkCreate(String client_id, String client_secret, String type_name, String all_attributes);
    
    public String entityCount(String client_id, String client_secret, String type_name, String filter);
    
    public Map<String,String> entityCreate(String client_id, String client_secret, String type_name, String attributes, Boolean include_record);
    
    public boolean entityDelete(String client_secret, String client_id, String access_token, String uuid, String id, String key_attribute, String key_value, String type_name, String attribute_name, String created, String last_updated);
    
    public String entityBulkDelete(String client_id, String client_secret, String type_name, String filter, Boolean commit);
    
    public String entityPurge(String client_id, String client_secret, String type_name, Boolean commit);
    
    public boolean entityReplace(String client_secret, String client_id, String access_token, String uuid, String id, String key_attribute, String key_value, String type_name, String value, String attribute_name, String created, String last_updated, Boolean include_record);
    
    public boolean entityUpdate(String client_secret, String client_id, String access_token, String uuid, String id, String key_attribute, String key_value, String type_name, String value, String attribute_name, String created, String last_updated, Boolean include_record);
    
    public String entityFind(String client_secret, String client_id, String type_name, String filter, String max_results, String first_result, Boolean show_total_count, String sort_on, String attributes);
    
    public boolean deleteSettings(String client_id, String client_secret, String key, String for_client_id);
    
    public boolean deleteDefault(String client_id, String client_secret, String key);
    
    public String getSettings(String client_id, String client_secret, String key, String for_client_id);
    
    public String getMultisettings(String client_id, String client_secret, String key, String for_client_id);
    
    public String getItems(String client_id, String client_secret, String for_client_id);
    
    public String getKeys(String client_id, String client_secret, String for_client_id);
    
    public String setSettings(String client_id, String client_secret, String key, String value, String for_client_id);
    
    public String getDefault(String client_id, String client_secret, String key);
    
    public boolean setDefault(String client_id, String client_secret, String key, String value);
    
    public String setMultisettings(String client_id, String client_secret, String items, String for_client_id);
    
    public String entityVersions(String type_name, String id, String timestamp, String client_id, String client_secret);
    
    public String getEntityType(String type_name, String timestamp, String client_id, String client_secret);
    
    public String getAccessToken(String uuid, String id, String key_attribute, String key_value, String client_id, String client_secret, String type_name, String for_client_id);

    public String getAuthorizationCode(String uuid, String id, String key_attribute, String key_value, String client_id, String client_secret, String redirect_uri, String type_name, String transaction_state, String lifetime, String for_client_id);
    
    public String getCreationToken(String client_id, String client_secret, String type_name, String lifetime, String for_client_id);
    
    public String getVerificationCode(String uuid, String id, String key_attribute, String key_value, String client_id, String client_secret, String type_name, String attribute_name, String lifetime);

    public boolean useVerificationCode(String verification_code);
    
    public String webhooksAdd(String client_id, String client_secret, String attributes, String callback, String event_type, String entity_type);
    
    public String webhooksDelete(String client_id, String client_secret, String uuid);
    
    public String webhooksFind(String client_id, String client_secret, String uuid);
    
    public String webhooksList(String client_id, String client_secret);
    
    public String webhooksUpdate(String client_id, String client_secret, String callback, String event_type, String entity_type, String attributes, String uuid);
    
    public String authNative(String client_id, String locale, String response_type, String redirect_uri, String token, String thin_registration, String merge_token, String flow_name, String flow_version);
    
    public String authNativeTraditional(String client_id, String locale, String response_type, String redirect_uri, String email, String password, String form, String flow_name, String flow_version);
    
    public String forgotPasswordNative(String client_id, String locale, String response_type, String redirect_uri, String form, String email, String flow_name, String flow_version);
    
    public String linkAccountNative(String client_id, String locale, String response_type, String redirect_uri, String token, String flow_name, String flow_version);
    
    public String registerNative(String client_id, String locale, String response_type, String redirect_uri, String token, String flow_name, String flow_version);

    public String verifyEmailNative(String client_id, String locale, String response_type, String redirect_uri, String form, String email, String flow_name, String flow_version);
    
    public String getToken(String client_id, String client_secret, String grant_type, String code, String redirect_uri, String refresh_token);

    public String registerNativeTraditional(String client_id, String locale, String response_type, String redirect_uri, String password, String password_confirm, String email, String flow_name, String flow_version);
    
}