/**
 * (c) 2003-2012 MuleSoft, Inc. This software is protected under international
 * copyright law. All use of this software is subject to MuleSoft's Master
 * Subscription Agreement (or other Terms of Service) separately entered
 * into between you and MuleSoft. If such an agreement is not in
 * place, you may not use the software.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */

package org.mule.modules.janrain;

import java.util.Map;

import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Processor;

import org.mule.modules.janrain.client.JanrainEngageClient;
import org.mule.modules.janrain.client.JanrainEngageClientImpl;
import org.mule.modules.janrain.client.JanrainPartnerClient;
import org.mule.modules.janrain.client.JanrainPartnerClientImpl;
import org.mule.modules.janrain.engage.AuthInfos;
import org.mule.modules.janrain.engage.AvailableProviders;
import org.mule.modules.janrain.engage.Backplane;
import org.mule.modules.janrain.engage.Broadcast;
import org.mule.modules.janrain.engage.Contacts;
import org.mule.modules.janrain.engage.Direct;
import org.mule.modules.janrain.engage.Identifiers;
import org.mule.modules.janrain.engage.Plugin;
import org.mule.modules.janrain.engage.ShareProviders;
import org.mule.modules.janrain.engage.UserInfo;
import org.mule.modules.janrain.engage.WidgetProviders;
import org.mule.modules.janrain.partner.Admins;
import org.mule.modules.janrain.partner.AppInfo;
import org.mule.modules.janrain.partner.Apps;
import org.mule.modules.janrain.partner.Invites;
import org.mule.modules.janrain.partner.Permissions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.json.JSONConfiguration;
import com.sun.jersey.core.impl.provider.entity.FormMultivaluedMapProvider;
import com.sun.jersey.core.impl.provider.entity.FormProvider;
import com.sun.jersey.core.impl.provider.entity.InputStreamProvider;
import com.sun.jersey.core.impl.provider.entity.MimeMultipartProvider;
import com.sun.jersey.multipart.impl.MultiPartWriter;

/**
 * Janrain Cloud Connector for API V2.
 *
 * @author MuleSoft, Inc.
 */

@Connector(name="janrain", schemaVersion="2.0", friendlyName="Janrain", minMuleVersion="3.4")
public class JanrainConnector {
        
    /**
     * The App Name
     */
    private String appName;
    
    /**
     * The App ID
     */
    private String appId;
    
    /**
     * The Api Key
     */
    private String apiKey;
            
    /**
     * Janrain Engage Client
     */
    private JanrainEngageClient janrainEngageClient;
    
    /**
     * Janrain Partner Client
     */
    private JanrainPartnerClient janrainPartnerClient;
    
    /**
     * Jersey Client
     */
    private Client jerseyClient;
    
    /**
     * Gson Parser
     */
    private Gson gson;
    
    /**
     * Connect
     *
     * @param apiKey the api Key
     * @param appName the app Name
     * @param appId the app Id
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String apiKey, String appName, String appId) throws ConnectionException {
        ClientConfig clientConfig = new DefaultClientConfig();
        clientConfig.getFeatures().put(JSONConfiguration.FEATURE_POJO_MAPPING, Boolean.TRUE);
        clientConfig.getClasses().add(MultiPartWriter.class);
        clientConfig.getClasses().add(MimeMultipartProvider.class);
        clientConfig.getClasses().add(InputStreamProvider.class);
        clientConfig.getClasses().add(FormProvider.class);
        clientConfig.getClasses().add(FormMultivaluedMapProvider.class);
        
        this.setAppId(appId);
        this.setApiKey(apiKey);
        this.setAppName(appName);
        this.gson = new GsonBuilder().create();
        this.setJerseyClient(Client.create(clientConfig));
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        this.jerseyClient = null;
        this.janrainEngageClient = null;
        this.janrainPartnerClient = null;
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return (this.jerseyClient != null && this.janrainEngageClient != null && this.janrainPartnerClient != null);
    }

    /**
     * Connection Id
     */
    @ConnectionIdentifier
    public String connectionId() {
        return apiKey;
    }

    /**
     * Auth Info
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:auth-info}
     *
     * @param token The token parameter received at your token_url.
     * @param extended Returns the extended Simple Registration and HCard data in addition to the normalized Portable Contacts format. 
     *        Ignored unless the application has a Pro or Enterprise service level.
     * @param tokenURL Validate the specified tokenURL value against the tokenURL that was originally sent. 
     * @return the auth info
     */
    @Processor
    public UserInfo authInfo(String token, @Optional Boolean extended, @Optional String tokenURL) {
        return getJanrainEngageClient().authInfo(token, extended, tokenURL);
    }
    
    /**
     * Add Or Update Access Token
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:add-or-update-access-token}
     *
     * @param token The access_token to grant to the user. 
     *        These tokens need to be requested from the individual Identity Provider according to their particular API.
     * @param identifier The identifier associated with the provider. This needs to to be formatted as a URL with profile number.
     * @return true if the operation is successful
     */
    @Processor
    public boolean addOrUpdateAccessToken(String token, String identifier) {
        return getJanrainEngageClient().addOrUpdateAccessToken(token, identifier);
    }
    
    /**
     * Analytics Access
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:analytics-access}
     *
     * @param start A date formatted as MM/DD/YYYY.
     * @param end A date formatted as MM/DD/YYYY.
     * @return the analytic data from your application
     */
    @Processor
    public Map<String, String> analyticsAccess(String start, String end) {
        return getJanrainEngageClient().analyticsAccess(start, end);
    }
    
    /**
     * Get App Settings
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-app-settings}
     *
     * @return the app settings
     */
    @Processor
    public Map<String, String> getAppSettings() {
        return getJanrainEngageClient().getAppSettings();
    }
    
    /**
     * Get Available Providers
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-available-providers}
     *
     * @return a list of configured providers for an application
     */
    @Processor
    public AvailableProviders getAvailableProviders() {
        return getJanrainEngageClient().getAvailableProviders();
    }
    
    /**
     * Get Contacts
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-contacts}
     *
     * @param identifier The identifier returned from the auth_info API call. 
     *                   The application must be configured to request this information in the Provider Configuration screen.
     * @param contactType Specify friends to return identifiers for every friend of the user. 
     *                    If you do not specify a value, friends will be returned if available.
     * @param existingUser If true returns a value that identifies if a user has previously authenticated with the Janrain application before.
     * @return a list of all the contacts related to the user
     */
    @Processor
    public Contacts getContacts(String identifier, @Optional String contactType, @Optional Boolean existingUser) {
        return getJanrainEngageClient().getContacts(identifier, contactType, existingUser);
    }
    
    /**
     * Get User Data
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-user-data}
     *
     * @param identifier The identifier returned from the auth_info API call. 
     *                   The application must be configured to request this information in the Provider Configuration screen.
     * @param extended Returns the extended Simple Registration and HCard data in addition to the normalized Portable Contacts format.
     * @return up-to-date copy of a user’s profile
     */
    @Processor
    public UserInfo getUserData(String identifier, @Optional Boolean extended) {
        return getJanrainEngageClient().getUserData(identifier, extended);
    }
    
    /**
     * Providers
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:providers}
     *
     * @return configured sign-in or social providers configured for a widget
     */
    @Processor
    public WidgetProviders providers() {
        return getJanrainEngageClient().providers();
    }
    
    /**
     * Set App Settings
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:set-app-settings}
     *
     * @param privacyPolicy Full URL to the location of your privacy policy.
     * @param favicon URL of your favicon.
     * @param domainRedirect The URL for the redirect.
     * @param postToTokenUrl A boolean, true or false.
     * @param oneTimeUseTokens A boolean, true or false.
     * @param googleProfileUrl A boolean, true or false.
     * @return true if the operation is successful
     */
    @Processor
    public boolean setAppSettings(@Optional String privacyPolicy, @Optional String favicon, @Optional String domainRedirect, 
            @Optional Boolean postToTokenUrl, @Optional Boolean oneTimeUseTokens, @Optional Boolean googleProfileUrl) {
        return getJanrainEngageClient().setAppSettings(privacyPolicy, favicon, domainRedirect, postToTokenUrl, oneTimeUseTokens, googleProfileUrl);
    }
    
    /**
     * Set Auth Providers
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:set-auth-providers}
     *
     * @param providers A comma separated string of provider specifiers.
     * @param deviceType web, iphone, android.
     * @return true if the operation is successful
     */
    @Processor
    public boolean setAuthProviders(String providers, @Optional String deviceType) {
        return getJanrainEngageClient().setAuthProviders(providers, deviceType);
    }
    
    /**
     * All Mappings
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:all-mappings}
     *
     * @return all of the stored mappings of an application
     */
    @Processor
    public String allMappings() {
        return getJanrainEngageClient().allMappings();
    }
    
    /**
     * Map
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:map}
     *
     * @param identifier The identifier returned from the auth_info API call.
     * @param primaryKey The primary key from your users table, as a string.
     * @param overwrite If false, only create the mapping if one does not already exist for the specified identifier.
     * @return true if the operation is successful
     */
    @Processor
    public boolean map(String identifier, String primaryKey, @Optional Boolean overwrite) {
        return getJanrainEngageClient().map(identifier, primaryKey, overwrite);
    }
    
    /**
     * Mappings
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:mappings}
     *
     * @param primaryKey The primary key from your users table, as a string.
     * @return all the stored Identity Providers associated with a particular user’s primary key
     */
    @Processor
    public Identifiers mappings(String primaryKey) {
        return getJanrainEngageClient().mappings(primaryKey);
    }
    
    /**
     * Unmap
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:unmap}
     *
     * @param identifier The identifier currently mapped to the primaryKey.
     * @param allIdentifiers false is the default. If true, all identifiers mapped to the primaryKey are removed.
     * @param primaryKey The primary key from your users table, as a string.
     * @param unlink false is the default. If true, unlinks your application from the user’s account with the provider.
     * @return true if the operation is successful
     */
    @Processor
    public boolean unmap(String identifier, @Optional @Default("false") Boolean allIdentifiers, String primaryKey, Boolean unlink) {
        return getJanrainEngageClient().unmap(identifier, allIdentifiers, primaryKey, unlink);
    }
    
    /**
     * Broadcast
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:broadcast}
     *
     * @param identifier The identifier URL or deviceToken of the user sharing an activity. Do not use the deviceToken with mobile browsers.
     * @param deviceToken The identifier URL or deviceToken of the user sharing an activity. Do not use the deviceToken with mobile browsers.
     * @param title The title given to the shared content.
     * @param url The URL associated to the content being shared.
     * @param source URL of the site sharing the activity.
     * @param message Message associated with the activity being shared.
     * @param description The description of the shared content. This appears in the preview of the shared object and describes what is being shared.
     * @param image An image associated with the content being shared.
     * @param media The Flash or video object associated with the content being shared.
     * @param actionLink The link that appears below the user-generated message and content fields. In the case of Facebook, this link appears next to the Like and Comment links.
     * @param objectId Facebook only. Use this parameter to share to a Facebook fan page instead of the User’s wall. The value is the Object ID assigned to the fan page.
     * @return The response includes a share element which returns fields that were actually passed to the provider. 
     *         If the provider does not support a parameter, it will not be included in the result
     */
    @Processor
    public Broadcast broadcast(@Optional String identifier, @Optional String deviceToken, @Optional String title, 
            @Optional String url, @Optional String source, @Optional String message, @Optional String description, 
            @Optional String image, @Optional String media, @Optional String actionLink, @Optional String objectId) {
        return getJanrainEngageClient().broadcast(identifier, deviceToken, title, url, source, message, description, image, media, actionLink, objectId);
    }
    
    /**
     * Direct
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:direct}
     *
     * @param identifier The identifier URL or deviceToken of the user sharing an activity. Do not use the deviceToken with mobile browsers.
     * @param deviceToken The identifier URL or deviceToken of the user sharing an activity. Do not use the deviceToken with mobile browsers.
     * @param title The title given to the shared content.
     * @param url The URL associated to the content being shared.
     * @param recipients A list of identifiers in JSON associated with the recipients being contacted.
     * @param source URL of the site sharing the activity.
     * @param message Message associated with the activity being shared.
     * @param description The description of the shared content. This appears in the preview of the shared object and describes what is being shared.
     * @param image An image associated with the content being shared.
     * @param media The Flash or video object associated with the content being shared.
     * @param actionLink The link that appears below the user-generated message and content fields. In the case of Facebook, this link appears next to the Like and Comment links.
     * @param recipientUrls Allows for sharing multiple urls to multiple recipients. The value is a JSON object of recipients and shared urls.
     * @return The response includes a share element which returns fields that were actually passed to the provider. 
     *         If the provider does not support a parameter, it will not be included in the result
     */
    @Processor
    public Direct direct(@Optional String identifier, @Optional String deviceToken, @Optional String title, 
            @Optional String url, String recipients, @Optional String source, @Optional String message, @Optional String description, 
            @Optional String image, @Optional String media, @Optional String actionLink, @Optional String recipientUrls) {
        return getJanrainEngageClient().direct(identifier, deviceToken, title, url, recipients, source, message, description, image, media, actionLink, recipientUrls);
    }
    
    /**
     * Get Share Count
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-share-count}
     *
     * @param url The URL that was shared.
     * @param callback When a value is added, returns data in JSONP format.
     * @return he number of a times a given URL has been shared.
     */
    @Processor
    public String getShareCount(String url, @Optional String callback) {
        return getJanrainEngageClient().getShareCount(url, callback);
    }
    
    /**
     * Get Share Providers
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-share-providers}
     *
     * @return a list of email and sharing providers configured for the widget.
     */
    @Processor
    public ShareProviders getShareProviders() {
        return getJanrainEngageClient().getShareProviders();
    }
    
    /**
     * Set Share Providers
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:set-share-providers}
     *
     * @param share Sharing providers to add to the widget. This may be left empty, in which case the widget will have no sharing providers.
     * @param email Email providers to add to the widget. You can leave this empty, in which case the widget will have no email providers.
     * @return true if the operation is successful
     */
    @Processor
    public boolean setShareProviders(String share, @Optional String email) {
        return getJanrainEngageClient().setShareProviders(share, email);
    }
    
    /**
     * Add Domain Patterns
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:add-domain-patterns}
     *
     * @param domains A comma separated list of domains that will be used as a whitelist for the website.
     * @return true if the operation is successful
     */
    @Processor
    public boolean addDomainPatterns(String domains) {
        return getJanrainEngageClient().addDomainPatterns(domains);
    }
    
    /**
     * Get Backplane Properties
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-backplane-properties}
     *
     * @return the backplane properties.
     */
    @Processor
    public Backplane getBackplaneProperties() {
        return getJanrainEngageClient().getBackplaneProperties();
    }
    
    /**
     * Get Domain Patterns
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-domain-patterns}
     *
     * @return the domain patterns.
     */
    @Processor
    public String getDomainPatterns() {
        return getJanrainEngageClient().getDomainPatterns();
    }
    
    /**
     * Lookup Rp
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:lookup-rp}
     *
     * @param pluginName The name of your plugin.
     * @param pluginVersion The version number of your plugin.
     * @return the plugin response.
     */
    @Processor
    public Plugin lookupRp(@Optional String pluginName, @Optional String pluginVersion) {
        return getJanrainEngageClient().lookupRp(pluginName, pluginVersion);
    }
    
    /**
     * Set Backplane Properties
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:set-backplane-properties}
     *
     * @param server The Backplane server’s domain name, such as, example.com.
     * @param bus The Backplane bus name.
     * @param version The Backplane server version, for example, v1.1. The default value is v1.
     * @param remove  false is the default. If false, add a new Backplane configuration; otherwise, 
     *                remove the Backplane configuration for the specified server or bus.
     * @param username Only required when you do not use remove. The user name for the Backplane credential.
     * @param password Only required when you do not use remove. The user name for the Backplane credential.
     * @return true if the operation is successful
     */
    @Processor
    public boolean setBackplaneProperties(String server, String bus, @Optional @Default("v1") String version, @Optional Boolean remove, 
            String username, String password) {
        return getJanrainEngageClient().setBackplaneProperties(server, bus, version, remove, username, password);
    }
    
    /**
     * Set Domain Patterns
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:set-domain-patterns}
     *
     * @param domains A comma separated list of domains used as a whitelist for the website.
     * @return true if the operation is successful
     */
    @Processor
    public boolean setDomainPatterns(String domains) {
        return getJanrainEngageClient().setDomainPatterns(domains);
    }
    
    /**
     * Activity
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:activity}
     *
     * @param activity The activity structure, JSON-encoded.
     * @param identifier The identifier URL or device_token of the user sharing an activity. Do not use the device_token with mobile browsers.
     * @param deviceToken The identifier URL or device_token of the user sharing an activity. Do not use the device_token with mobile browsers.
     * @param truncate If true, truncate the activity update text when posting to providers which impose length restrictions (currently Twitter).
     * @param prependName If true, prepend the user’s name to the action when posting to Facebook (ignored for other providers).
     * @param urlShortening A boolean indicating whether to provide the entire URL in the post or tweet, or the shortened version. (PRO)
     * @param source Must be domain or URL. Defines a specific domain or URL as the source page of the sharing activity. Used by analytics to categorize posts by domain.
     * @return true if the operation is successful
     */
    @Processor
    public boolean activity(String activity, @Optional String identifier, @Optional String deviceToken, 
            @Optional @Default("true") Boolean truncate, @Optional @Default("true") Boolean prependName, @Optional String urlShortening, @Optional String source) {
        return getJanrainEngageClient().activity(activity, identifier, deviceToken, truncate, prependName, urlShortening, source);
    }
    
    /**
     * Auth Infos
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:auth-infos}
     *
     * @param tokens The tokens parameter received at your token callback URL as described in Token Callback URL on the Token Callback URL page.
     * @param extended Returns the extended Simple Registration and HCard data in addition to the normalized Portable Contacts format.
     * @return data from more than one identity provider
     */
    @Processor
    public AuthInfos authInfos(String tokens, @Optional @Default("false") Boolean extended) {
        return getJanrainEngageClient().authInfos(tokens, extended);
    }
    
    /**
     * Set Status
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:set-status}
     *
     * @param identifier The identifier returned from the auth_info API call.
     * @param status The status message to set. Engage does not set a length restriction on this message, however Twitter and LinkedIn limit status length to 140 characters.
     * @param location This is a string containing location data associated with the content being published. 
     * @param truncate If true, truncate status when posting to providers that impose status length restrictions (currently Twitter, Yahoo, and LinkedIn).
     * @param source Must be domain or URL. Defines a specific domain or URL as the source page of the sharing activity. Used by analytics to categorize posts by domain.
     * @return true if the operation is successful
     */
    @Processor
    public boolean setStatus(String identifier, String status, @Optional String location, @Optional @Default("true") Boolean truncate,
            @Optional String source) {
        return getJanrainEngageClient().setStatus(identifier, status, location, truncate, source);
    }
    
    /**
     * Add Bp Bus
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:add-bp-bus}
     *
     * @param partnerKey Enter your partnerKey.
     * @return The response includes the name of the new bus, and the name of the application with which it is associated.
     */
    @Processor
    public Map<String, String> addBpBus(String partnerKey) {
        return getJanrainPartnerClient().addBpBus(partnerKey);
    }
    
    /**
     * Apps
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:apps}
     *
     * @param partnerKey Enter your partnerKey.
     * @return List of applications managed by the partner. 
     */
    @Processor
    public Apps apps(String partnerKey) {
        return getJanrainPartnerClient().apps(partnerKey);
    }
    
    /**
     * Add Admin
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:add-admin}
     *
     * @param partnerKey You Engage partner key, which you can find on the dashboard.
     * @param email The email address of the admin user to be added.
     * @param verify Indicates whether a verification email is sent out, requiring the user to click on it before they get access to the website.
     * @return true if the operation is successful
     */
    @Processor
    public boolean addAdmin(String partnerKey, String email, @Optional @Default("true") Boolean verify) {
        return getJanrainPartnerClient().addAdmin(partnerKey, email, verify);
    }
    
    /**
     * Delete Admin
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:delete-admin}
     *
     * @param partnerKey You Engage partner key, which you can find on the dashboard.
     * @param email The email address of the admin user to be added.
     * @return true if the operation is successful
     */
    @Processor
    public boolean deleteAdmin(String partnerKey, String email) {
        return getJanrainPartnerClient().deleteAdmin(partnerKey, email);
    }
    
    /**
     * Get Admins
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-admins}
     *
     * @param partnerKey You Engage partner key, which you can find on the dashboard.
     * @return This call returns all admin users currently assigned to the RP.
     */
    @Processor
    public Admins getAdmins(String partnerKey) {
        return getJanrainPartnerClient().getAdmins(partnerKey);
    }
    
    /**
     * Add Domain
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:add-domain}
     *
     * @param partnerKey Engage partner key, which you can find on the dashboard.
     * @param engageApiKey Engage API Key, which you can find on the dashboard.
     * @param domain The domain to add.
     * @return true if the operation is successful.
     */
    @Processor
    public boolean addDomain(String partnerKey, String engageApiKey, String domain) {
        return getJanrainPartnerClient().addDomain(partnerKey, engageApiKey, domain);
    }
    
    /**
     * Create App
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:create-app}
     *
     * @param partnerKey Engage partner key, which you can find on the dashboard.
     * @param email The administrative email address to be associated with your new Engage application.
     * @param displayName The display name for your new Engage application.
     * @param domain The fully-qualified domain for your new Engage application.
     * @return This call creates a new Engage application. 
     */
    @Processor
    public AppInfo createApp(String partnerKey, String email, String displayName, String domain) {
        return getJanrainPartnerClient().createApp(partnerKey, email, displayName, domain);
    }
    
    /**
     * Create Invite
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:create-invite}
     *
     * @param engageApiKey Engage API Key, which you can find on the dashboard.
     * @param partnerKey Engage partner key, which you can find on the dashboard.
     * @param email The administrative email address to be associated with your new Engage application.
     * @return This call generates an email invitation for administrative access to an existing application.
     */
    @Processor
    public String createInvite(String engageApiKey, String partnerKey, String email) {
        return getJanrainPartnerClient().createInvite(engageApiKey, partnerKey, email);
    }
    
    /**
     * Delete App
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:delete-app}
     *
     * @param engageApiKey The Engage apiKey for the application to be deleted.
     * @param partnerKey The Engage partnerKey for the application that created the app referenced by apiKey.
     * @return true if the operation is successful.
     */
    @Processor
    public boolean deleteApp(String engageApiKey, String partnerKey) {
        return getJanrainPartnerClient().deleteApp(engageApiKey, partnerKey);
    }
    
    /**
     * Get Pending Invites
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-pending-invites}
     *
     * @param engageApiKey Engage API key for the application for which to return pending invites.
     * @param partnerKey The Engage partner key for the application that created the app referenced by the apiKey parameter.
     * @return the pending invites.
     */
    @Processor
    public Invites getPendingInvites(String engageApiKey, String partnerKey) {
        return getJanrainPartnerClient().getPendingInvites(engageApiKey, partnerKey);
    }
    
    /**
     * Get Properties
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-properties}
     *
     * @param partnerKey The Engage partner key for the application that created the app referenced by the apiKey parameter.
     * @param engageApiKey Engage API key for the application for which to return pending invites.
     * @param provider The name of the provider whose properties you want to return. 
     * @return the app properties.
     */
    @Processor
    public Map<String, String> getProperties(String partnerKey, String engageApiKey, String provider) {
        return getJanrainPartnerClient().getProperties(engageApiKey, partnerKey, provider);
    }
    
    /**
     * Get Provider Permissions
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:get-provider-permissions}
     *
     * @param partnerKey The Engage partner key for the application that created the app referenced by the apiKey parameter.
     * @param engageApiKey Engage API key for the application for which to return pending invites.
     * @param provider The name of the provider whose properties you want to return. 
     * @return the provider permission.
     */
    @Processor
    public Permissions getProviderPermissions(String partnerKey, String engageApiKey, String provider) {
        return getJanrainPartnerClient().getProviderPermissions(engageApiKey, partnerKey, provider);
    }
    
    /**
     * Reset Api Key
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:reset-api-key}
     *
     * @param rpAppId The application identifier of the RP application for which you want to reset the API key.
     * @param partnerKey The Engage partner key for the application that created the app referenced by the apiKey parameter.
     * @return the new api key.
     */
    @Processor
    public String resetApiKey(String rpAppId, String partnerKey) {
        return getJanrainPartnerClient().resetApiKey(rpAppId, partnerKey);
    }
    
    /**
     * Set Properties
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:set-properties}
     *
     * @param engageApiKey The Engage API Key of the application to configure.
     * @param partnerKey Your Engage partner key, which you can find on the dashboard.
     * @param provider The name of the provider to configure.
     * @param fbAppID Facebook only: The Application Id for the user’s Facebook application.
     * @param fbSecret Facebook Only: The Application Secret for the user’s Facebook application.
     * @param emailPerm Facebook only: Set to true if this application needs email to receive end-user email addresses.
     * @param uninstallURL Facebook only: This is the URL that is invoked when the user uninstalls the Facebook application.
     * @param consumerKey This is the Consumer Key for the user’s application. 
     * @param secret The consumer secret the user’s application.
     * @param paypalDisplayName PayPal only: The display name for the user’s Paypal application.
     * @param email PayPal only: enter a valid email address that is already registered with a PayPal account.
     * @param liveidAppID Windows Live only: The Application ID for the user’s Windows Live application.
     * @param liveidSecret Windows Live only: The Secret Key for the user’s Windows Live application.
     * @param liveidPrivacyPolicyUrl Windows Live only: The URL for the Windows Live application’s privacy policy.
     * @param yahooAppID Yahoo only: The Application ID for the user’s Yahoo application.
     * @param activityScopesSet Yahoo only: Set to true if the user’s Yahoo application has read and write permissions for “Status” and “Updates.”
     * @param contactsScopeSet Yahoo only: Set to true if the user’s Yahoo application has read permission for “Contacts.”
     * @return true if the operation is successful.
     */
    @Processor
    public boolean setProperties(String engageApiKey, String partnerKey, String provider, @Optional String fbAppID, @Optional String fbSecret,
            @Optional Boolean emailPerm, @Optional String uninstallURL, String consumerKey, String secret, @Optional String paypalDisplayName,
            @Optional String email, @Optional String liveidAppID, @Optional String liveidSecret, @Optional String liveidPrivacyPolicyUrl, 
            @Optional String yahooAppID, @Optional Boolean activityScopesSet, @Optional Boolean contactsScopeSet) {
        return getJanrainPartnerClient().setProperties(engageApiKey, partnerKey, provider, fbAppID, fbSecret, emailPerm, uninstallURL, 
                consumerKey, secret, paypalDisplayName, email, liveidAppID, liveidSecret, liveidPrivacyPolicyUrl, yahooAppID, 
                activityScopesSet, contactsScopeSet);
    }
    
    /**
     * Set Provider Permissions
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:set-provider-permissions}
     *
     * @param engageApiKey The Engage API Key of the application to configure.
     * @param partnerKey Your Engage partner key, which you can find on the dashboard.
     * @param provider The name of the provider to configure.
     * @param permissions A comma-separated list of permissions to set.
     * @return true if the operation is successful.
     */
    @Processor
    public boolean setProviderPermissions(String engageApiKey, String partnerKey, String provider, String permissions) {
        return getJanrainPartnerClient().setProviderPermissions(engageApiKey, partnerKey, provider, permissions);
    }
    
    /**
     * Verify Domain
     *
     * {@sample.xml ../../../doc/janrain-connector.xml.sample janrain:verify-domain}
     *
     * @param engageApiKey The Engage API Key of the application to configure.
     * @param partnerKey Your Engage partner key, which you can find on the dashboard.
     * @param provider The name of the provider to configure.
     * @param code This is the Google-supplied META tag value that will be created on the domain.
     * @param filename This is the Yahoo-supplied filename that will be created on the domain. 
     * @return true if the operation is successful.
     */
    @Processor
    public boolean verifyDomain(String engageApiKey, String partnerKey, String provider, @Optional String code, @Optional String filename) {
        return getJanrainPartnerClient().verifyDomain(engageApiKey, partnerKey, provider, code, filename);
    }
    
    public JanrainEngageClient getJanrainEngageClient() {
        if (janrainEngageClient != null) {
            return janrainEngageClient;
        }
        janrainEngageClient = new JanrainEngageClientImpl(appName, appId, apiKey, jerseyClient, gson);
        return janrainEngageClient;
    }
    
    public JanrainPartnerClient getJanrainPartnerClient() {
        if (janrainPartnerClient != null) {
            return janrainPartnerClient;
        }
        janrainPartnerClient = new JanrainPartnerClientImpl(appName, appId, apiKey, jerseyClient, gson);
        return janrainPartnerClient;
    }
    
    public Client getJerseyClient() {
        return jerseyClient;
    }

    public void setJerseyClient(Client jerseyClient) {
        this.jerseyClient = jerseyClient;
    }

    public String getAppName() {
        return appName;
    }

    public void setAppName(String appName) {
        this.appName = appName;
    }

    public String getApiKey() {
        return apiKey;
    }

    public void setApiKey(String apiKey) {
        this.apiKey = apiKey;
    }

    public String getAppId() {
        return appId;
    }

    public void setAppId(String appId) {
        this.appId = appId;
    }
        
}